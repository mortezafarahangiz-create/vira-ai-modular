import os
from typing import List, Optional
from pydantic import Field, SecretStr
from pydantic_settings import BaseSettings, SettingsConfigDict

# -----------------------------------------------------------------
# کلاس تنظیمات اصلی برنامه
# این کلاس متغیرها را از فایل .env در ریشه پروژه بارگذاری می کند.
# -----------------------------------------------------------------
class Settings(BaseSettings):
    """
    کلاس تنظیمات که متغیرهای محیطی را از فایل .env می خواند.
    """
    # تنظیمات مدل برای مشخص کردن فایل محیطی و حساسیت به حروف کوچک/بزرگ
    model_config = SettingsConfigDict(
        env_file=".env", 
        case_sensitive=True,
        extra='ignore' # برای نادیده گرفتن متغیرهای محیطی که اینجا تعریف نشده اند
    )

    # -----------------------------------------------------------------
    # 1. تنظیمات امنیتی هسته (Security)
    # -----------------------------------------------------------------
    # کلید JWT برای امضای توکن‌ها. از نوع SecretStr برای جلوگیری از لاگ شدن ناخواسته.
    SECRET_KEY: SecretStr = Field(..., description="JWT Secret Key for token signing")

    # -----------------------------------------------------------------
    # 2. تنظیمات دیتابیس (PostgreSQL)
    # -----------------------------------------------------------------
    # نام سرویس دیتابیس که در docker-compose.yml تعریف شده است.
    POSTGRES_SERVER: str = Field("db", description="PostgreSQL service name from docker-compose")
    POSTGRES_PORT: int = Field(5432, description="PostgreSQL port")
    POSTGRES_USER: str = Field("vira_user", description="PostgreSQL username")
    POSTGRES_DB: str = Field("vira_db", description="PostgreSQL database name")
    
    # رمز عبور دیتابیس. از نوع SecretStr.
    POSTGRES_PASSWORD: SecretStr = Field(..., description="PostgreSQL database password")

    # -----------------------------------------------------------------
    # 3. کلیدهای سرویس هوش مصنوعی (AI Service Keys)
    # -----------------------------------------------------------------
    # کلید API جِمینی. از نوع SecretStr.
    GEMINI_API_KEY: SecretStr = Field(..., description="Gemini API Key for LLM services")
    
    # توکن HuggingFace (اختیاری).
    HUGGINGFACE_TOKEN: Optional[SecretStr] = Field(None, description="Optional HuggingFace Token")

    # -----------------------------------------------------------------
    # 4. تنظیمات CORS (Cross-Origin Resource Sharing)
    # -----------------------------------------------------------------
    # لیست مبدأهای مجاز برای دسترسی به API (به صورت رشته کاما-جدا شده).
    # این متغیر مستقیماً از فایل .env خوانده می شود.
    CORS_ORIGINS: str = Field(..., description="Comma-separated list of allowed CORS origins")

    # -----------------------------------------------------------------
    # 5. متغیرهای محاسباتی (Computed Properties)
    # -----------------------------------------------------------------
    @property
    def DATABASE_URL(self) -> str:
        """
        ایجاد رشته اتصال به دیتابیس (DSN) برای استفاده توسط SQLAlchemy.
        از پروتکل 'postgresql+asyncpg' برای درایور آسنکرون استفاده می کند.
        """
        # استفاده از get_secret_value
