# مرحله ۱: استفاده از ایمیج پایه رسمی پایتون
# ما از ایمیج slim برای کاهش حجم نهایی کانتینر استفاده می‌کنیم.
FROM python:3.11-slim-bookworm

# مرحله ۲: تنظیم متغیرهای محیطی
# از این متغیر برای فعال کردن حالت غیربافرینگ پایتون استفاده می‌کنیم تا لاگ‌ها فوراً به stdout/stderr ارسال شوند.
ENV PYTHONUNBUFFERED=1

# تنظیم دایرکتوری کاری در داخل کانتینر
WORKDIR /app

# مرحله ۳: کپی کردن و نصب نیازمندی‌ها
# کپی کردن فایل نیازمندی‌ها (requirements.txt)
# فقط این فایل را کپی می‌کنیم تا لایه کش Docker بتواند سریعتر تشخیص دهد که نیازی به نصب مجدد پکیج‌ها نیست.
COPY ./requirements.txt /app/requirements.txt

# نصب نیازمندی‌های پایتون
# از آپشن --no-cache-dir برای جلوگیری از ذخیره فایل‌های موقت در کانتینر استفاده می‌کنیم.
RUN pip install --upgrade pip
RUN pip install --no-cache-dir -r /app/requirements.txt

# مرحله ۴: کپی کردن کدهای برنامه
# کپی کردن تمام محتوای پوشه backend فعلی به دایرکتوری کاری /app در کانتینر.
# این شامل main.py و سایر فایل‌های پیکربندی خواهد بود.
COPY . /app

# مرحله ۵: دستور اجرا (CMD)
# تعریف دستوری که هنگام اجرای کانتینر اجرا خواهد شد.
# ما از Uvicorn (سرور ASGI) برای اجرای برنامه FastAPI استفاده می‌کنیم.
# --host 0.0.0.0: گوش دادن به تمام اینترفیس‌ها (ضروری برای کانتینرها)
# --port 8000: پورت پیش‌فرض برای اجرای سرور
# main:app: اشاره به نمونه برنامه FastAPI در ماژول main
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
